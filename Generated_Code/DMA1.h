/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : DMA1.h
**     Project     : ProcessorExpert
**     Processor   : MK60FX512VLQ15
**     Component   : DMA_LDD
**     Version     : Component 01.065, Driver 01.07, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2014-07-15, 17:57, # CodeGen: 103
**     Abstract    :
**          This embedded component implements initialization
**          and runtime handling of an on-chip DMA controller.
**     Settings    :
**          Component name                                 : DMA1
**          Device                                         : DMA
**          Settings                                       : 
**            Minor loop mapping                           : Disabled
**            Continuous mode                              : Disabled
**            Halt on error                                : Disabled
**            Debug                                        : Enabled
**          Channel arbitration type                       : Fixed
**          DMA channels                                   : 1
**            Settings of DMA channel                      : DMA_Channel0
**              Channel                                    : DMA_Channel0
**              Channel arbitration type                   : Fixed
**                Priority                                 : 0
**                Channel preemption                       : Disabled
**                Preempt ability                          : Disabled
**              Interrupt service                          : Disabled
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init                              - LDD_TDeviceData* DMA1_Init(LDD_TUserData *UserDataPtr);
**         Deinit                            - void DMA1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         AllocateChannel                   - LDD_TError DMA1_AllocateChannel(LDD_TDeviceData *DeviceDataPtr,...
**         FreeChannel                       - LDD_TError DMA1_FreeChannel(LDD_TDeviceData *DeviceDataPtr,...
**         EnableChannel                     - LDD_TError DMA1_EnableChannel(LDD_TDeviceData *DeviceDataPtr,...
**         DisableChannel                    - LDD_TError DMA1_DisableChannel(LDD_TDeviceData *DeviceDataPtr,...
**         StartChannelTransfer              - LDD_TError DMA1_StartChannelTransfer(LDD_TDeviceData *DeviceDataPtr,...
**         CancelChannelTransfer             - LDD_TError DMA1_CancelChannelTransfer(LDD_TDeviceData *DeviceDataPtr,...
**         GetChannelTransferredBytes        - LDD_TError DMA1_GetChannelTransferredBytes(LDD_TDeviceData *DeviceDataPtr,...
**         GetChannelStatus                  - LDD_DMA_TChannelStatus DMA1_GetChannelStatus(LDD_TDeviceData *DeviceDataPtr,...
**         GetChannelLastError               - void DMA1_GetChannelLastError(LDD_TDeviceData *DeviceDataPtr,...
**         SetChannelSourceAddress           - LDD_TError DMA1_SetChannelSourceAddress(LDD_TDeviceData *DeviceDataPtr,...
**         SetChannelDestinationAddress      - LDD_TError DMA1_SetChannelDestinationAddress(LDD_TDeviceData *DeviceDataPtr,...
**         SetChannelSourceTransferSize      - LDD_TError DMA1_SetChannelSourceTransferSize(LDD_TDeviceData *DeviceDataPtr,...
**         SetChannelDestinationTransferSize - LDD_TError DMA1_SetChannelDestinationTransferSize(LDD_TDeviceData...
**         SetChannelByteCount               - LDD_TError DMA1_SetChannelByteCount(LDD_TDeviceData *DeviceDataPtr,...
**         GetChannelDescriptorUpdate        - LDD_TError DMA1_GetChannelDescriptorUpdate(LDD_TDeviceData *DeviceDataPtr,...
**         SetChannelDescriptorUpdate        - LDD_TError DMA1_SetChannelDescriptorUpdate(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file DMA1.h
** @version 01.07
** @brief
**          This embedded component implements initialization
**          and runtime handling of an on-chip DMA controller.
*/         
/*!
**  @addtogroup DMA1_module DMA1 module documentation
**  @{
*/         

#ifndef __DMA1_H
#define __DMA1_H

/* MODULE DMA1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "Cpu.h"
#include "DMA_PDD.h"
#include "DMAMUX_PDD.h"

#include "Cpu.h"


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define DMA1_PRPH_BASE_ADDRESS  0x40008000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define DMA1_Init_METHOD_ENABLED       /*!< Init method of the component DMA1 is enabled (generated) */
#define DMA1_Deinit_METHOD_ENABLED     /*!< Deinit method of the component DMA1 is enabled (generated) */
#define DMA1_AllocateChannel_METHOD_ENABLED /*!< AllocateChannel method of the component DMA1 is enabled (generated) */
#define DMA1_FreeChannel_METHOD_ENABLED /*!< FreeChannel method of the component DMA1 is enabled (generated) */
#define DMA1_EnableChannel_METHOD_ENABLED /*!< EnableChannel method of the component DMA1 is enabled (generated) */
#define DMA1_DisableChannel_METHOD_ENABLED /*!< DisableChannel method of the component DMA1 is enabled (generated) */
#define DMA1_StartChannelTransfer_METHOD_ENABLED /*!< StartChannelTransfer method of the component DMA1 is enabled (generated) */
#define DMA1_CancelChannelTransfer_METHOD_ENABLED /*!< CancelChannelTransfer method of the component DMA1 is enabled (generated) */
#define DMA1_GetChannelTransferredBytes_METHOD_ENABLED /*!< GetChannelTransferredBytes method of the component DMA1 is enabled (generated) */
#define DMA1_GetChannelStatus_METHOD_ENABLED /*!< GetChannelStatus method of the component DMA1 is enabled (generated) */
#define DMA1_GetChannelLastError_METHOD_ENABLED /*!< GetChannelLastError method of the component DMA1 is enabled (generated) */
#define DMA1_SetChannelSourceAddress_METHOD_ENABLED /*!< SetChannelSourceAddress method of the component DMA1 is enabled (generated) */
#define DMA1_SetChannelDestinationAddress_METHOD_ENABLED /*!< SetChannelDestinationAddress method of the component DMA1 is enabled (generated) */
#define DMA1_SetChannelSourceTransferSize_METHOD_ENABLED /*!< SetChannelSourceTransferSize method of the component DMA1 is enabled (generated) */
#define DMA1_SetChannelDestinationTransferSize_METHOD_ENABLED /*!< SetChannelDestinationTransferSize method of the component DMA1 is enabled (generated) */
#define DMA1_SetChannelByteCount_METHOD_ENABLED /*!< SetChannelByteCount method of the component DMA1 is enabled (generated) */
#define DMA1_GetChannelDescriptorUpdate_METHOD_ENABLED /*!< GetChannelDescriptorUpdate method of the component DMA1 is enabled (generated) */
#define DMA1_SetChannelDescriptorUpdate_METHOD_ENABLED /*!< SetChannelDescriptorUpdate method of the component DMA1 is enabled (generated) */

/* Number of DMA channels supported by hardware */
#define DMA1_DMA_CHANNELS_NUMBER 0x20U
/* Number of DMAMUX0 channels supported by hardware */
#define DMA1_DMAMUX0_CHANNELS_NUMBER 0x10U
/* Number of DMAMUX1 channels supported by hardware */
#define DMA1_DMAMUX1_CHANNELS_NUMBER 0x10U
/* Number of configured channels (i.e. all channels set in DMA1 component) */
#define DMA1_CONFIGURED_CHANNELS_NUMBER 0x01U
/* Number of available channels (i.e. all configured channels excluding permanently allocated channels) */
#define DMA1_AVAILABLE_CHANNELS_NUMBER 0x00U
/* Number of DMAMUX0 configured channels (i.e. DMAMUX0 channels set in DMA1 component) */
#define DMA1_CONFIGURED_DMAMUX0_CHANNELS_NUMBER 0x01U
/* Number of DMAMUX0 available channels (i.e. DMAMUX0 configured channels excluding permanently allocated channels) */
#define DMA1_AVAILABLE_DMAMUX0_CHANNELS_NUMBER 0x00U
/* No DMAMUX1 channels configured */
#define DMA1_CONFIGURED_DMAMUX1_CHANNELS_NUMBER 0x00U
/* No DMAMUX1 channels available */
#define DMA1_AVAILABLE_DMAMUX1_CHANNELS_NUMBER 0x00U
/* Number of permanently allocated channels */
#define DMA1_ALLOCATED_CHANNELS_NUMBER 0x01U
/* Number of permanently allocated DMAMUX0 channels */
#define DMA1_ALLOCATED_DMAMUX0_CHANNELS_NUMBER 0x01U
/* Number of permanently allocated DMAMUX1 channels */
#define DMA1_ALLOCATED_DMAMUX1_CHANNELS_NUMBER 0x00U
/* Number of available channels capable of periodic triggering (excluding permanently allocated channels) */
#define DMA1_PERIODIC_TRIGGER_CHANNELS_NUMBER 0x00U
/* Number of available DMAMUX0 channels capable of periodic triggering (excluding permanently allocated channels) */
#define DMA1_PERIODIC_TRIGGER_DMAMUX0_CHANNELS_NUMBER 0x00U
/* Number of available DMAMUX1 channels capable of periodic triggering (excluding permanently allocated channels) */
#define DMA1_PERIODIC_TRIGGER_DMAMUX1_CHANNELS_NUMBER 0x00U
/* No channels without periodic triggering capability available. */
#define DMA1_SIMPLE_CHANNELS_NUMBER 0U
/* No DMAMUX0 channels without periodic triggering capability available. */
#define DMA1_SIMPLE_DMAMUX0_CHANNELS_NUMBER 0U
/* No DMAMUX1 channels without periodic triggering capability available. */
#define DMA1_SIMPLE_DMAMUX1_CHANNELS_NUMBER 0U
/* Channel number constants */
#define DMA1_CHANNEL_0 0x00U
#define DMA1_CHANNEL_1 0x01U
#define DMA1_CHANNEL_2 0x02U
#define DMA1_CHANNEL_3 0x03U
#define DMA1_CHANNEL_4 0x04U
#define DMA1_CHANNEL_5 0x05U
#define DMA1_CHANNEL_6 0x06U
#define DMA1_CHANNEL_7 0x07U
#define DMA1_CHANNEL_8 0x08U
#define DMA1_CHANNEL_9 0x09U
#define DMA1_CHANNEL_10 0x0AU
#define DMA1_CHANNEL_11 0x0BU
#define DMA1_CHANNEL_12 0x0CU
#define DMA1_CHANNEL_13 0x0DU
#define DMA1_CHANNEL_14 0x0EU
#define DMA1_CHANNEL_15 0x0FU
#define DMA1_CHANNEL_16 0x10U
#define DMA1_CHANNEL_17 0x11U
#define DMA1_CHANNEL_18 0x12U
#define DMA1_CHANNEL_19 0x13U
#define DMA1_CHANNEL_20 0x14U
#define DMA1_CHANNEL_21 0x15U
#define DMA1_CHANNEL_22 0x16U
#define DMA1_CHANNEL_23 0x17U
#define DMA1_CHANNEL_24 0x18U
#define DMA1_CHANNEL_25 0x19U
#define DMA1_CHANNEL_26 0x1AU
#define DMA1_CHANNEL_27 0x1BU
#define DMA1_CHANNEL_28 0x1CU
#define DMA1_CHANNEL_29 0x1DU
#define DMA1_CHANNEL_30 0x1EU
#define DMA1_CHANNEL_31 0x1FU
/*  This constant contains mask of all supported events */
#define DMA1_AVAILABLE_EVENTS_MASK (LDD_DMA_ON_COMPLETE | LDD_DMA_ON_ERROR)
/* Maximum number of Nested transfers when channel-to-channel linking after request service is disabled */
#define DMA1_TRANSFER_COUNT_MAX_LINKING_DISABLED 0x7FFFU
/* Maximum number of Nested transfers when channel-to-channel linking after request service is enabled */
#define DMA1_TRANSFER_COUNT_MAX_LINKING_ENABLED 0x01FFU
/* Maximum number of bytes to be transferred in each service request of the channel */
#define DMA1_MAX_BYTE_COUNT 0xFFFFFFFFU
typedef struct {
  LDD_DMA_TChannelNumber ChannelNumber; /* ChannelNumber */
  LDD_DMA_TTransferDescriptor *DescriptorPtr; /* Pointer to the channel's transfer descriptor */
  bool Interrupts;                     /* True, if the DMA channel has enabled interrupts */
  bool Initialized;                    /* True, if the DMA channel has been initialized */
  bool Enabled;                        /* True, if the DMA channel is enabled */
} DMA1_TDescriptorRecord;              /* Transfer descriptor record type. */

typedef DMA1_TDescriptorRecord *DMA1_TDescriptorRecordPtr; /* Pointer to transfer descriptor record. */

typedef struct {
  DMA1_TDescriptorRecord DescriptorRecord[DMA1_CONFIGURED_CHANNELS_NUMBER]; /* Transfer descriptor records table, one record per one channel. */
  DMA1_TDescriptorRecord *ChannelRecord[DMA1_DMA_CHANNELS_NUMBER]; /* Channel record table for each channel. */
  LDD_TUserData *UserDataPtr;          /* User device data structure */
} DMA1_TDeviceData;                    /* Device data structure */

/* DMA Transfer descriptor structure variables external declarations */
extern DMA1_TDeviceData *DMA1_DeviceDataPtr;


/*
** ===================================================================
**     Method      :  DMA1_Init (component DMA_LDD)
*/
/*!
**     @brief
**         Initializes the device according to design-time
**         configuration properties. Allocates memory for the device
**         data structure. 
**         If the <Enable in init. code> is set to "yes" then the
**         device is also enabled (see the description of the Enable
**         method).
**         This method can be called only once. Before the second call
**         of Init the Deinit method must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Pointer to the device data structure. 
*/
/* ===================================================================*/
LDD_TDeviceData* DMA1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  DMA1_Deinit (component DMA_LDD)
*/
/*!
**     @brief
**         Deinitializes the associated peripheral(s) and frees the
**         component internal data structure.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
*/
/* ===================================================================*/
void DMA1_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMA1_AllocateChannel (component DMA_LDD)
*/
/*!
**     @brief
**         The method allocates DMA channel for the DMA transfer
**         defined by the transfer descriptor input parameter
**         DescriptorPtr. This method must be called before DMA channel
**         is initialized. Otherwise ERR_NOTAVAIL error code is
**         returned after call of DMA_LDD channel methods.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any possible
**                           channel with desired features to be
**                           allocated.
*/
/* ===================================================================*/
LDD_TError DMA1_AllocateChannel(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_FreeChannel (component DMA_LDD)
*/
/*!
**     @brief
**         The method frees and disables the DMA channel allocated for
**         the DMA transfer defined by the transfer descriptor input
**         parameter DescriptorPtr.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMA1_FreeChannel(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_EnableChannel (component DMA_LDD)
*/
/*!
**     @brief
**         The method initializes and/or enables the DMA channel
**         allocated for the DMA transfer defined by the transfer
**         descriptor input parameter DescriptorPtr. First call of this
**         method on given DMA channel initializes it and enables HW
**         requests if Peripheral device or Always enabled trigger
**         source is selected in transfer descriptor Trigger source
**         type item. This method can be also used together with
**         Disable method to temporary switch On/Off the DMA channel HW
**         requests. In such case DMA channel registers are not
**         reinitialized again. New initialization of DMA channel can
**         be done via SetChannelDescriptorUpdate method which
**         reinitializes whole channel with new transfer descriptor.
**         After calling of EnableChannel method channel status is set
**         to LDD_DMA_IDLE.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Transfer descriptor data
**                           are inconsistent.
*/
/* ===================================================================*/
LDD_TError DMA1_EnableChannel(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_DisableChannel (component DMA_LDD)
*/
/*!
**     @brief
**         The method disables the DMA channel allocated for the DMA
**         transfer defined by the transfer descriptor input parameter
**         DescriptorPtr and disables HW requests services. However, it
**         is still possible to start transfer explicitly as SW
**         transfer requests via StartChannelTransfer method. After
**         calling of DisableChannel method channel status is set to
**         LDD_DMA_IDLE.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMA1_DisableChannel(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_StartChannelTransfer (component DMA_LDD)
*/
/*!
**     @brief
**         The method starts DMA transfer on the allocated DMA channel
**         defined by the transfer descriptor input parameter
**         DescriptorPtr. This methods initiates explicit SW transfer
**         request and can be called after channel is initialized by
**         first calling of EnableChannel method. Explicit SW transfer
**         request is serviced regardless of disabling HW requests
**         after calling of the DisableChannel method.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMA1_StartChannelTransfer(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_CancelChannelTransfer (component DMA_LDD)
*/
/*!
**     @brief
**         The method cancels DMA transfer on channel specified by the
**         transfer descriptor input parameter DescriptorPtr. The
**         cancel takes effect after the last write of the current
**         read/write sequence and the channel retires as if the
**         request was serviced normally.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMA1_CancelChannelTransfer(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_GetChannelStatus (component DMA_LDD)
*/
/*!
**     @brief
**         The method gets a status of the DMA channel allocated for
**         the DMA transfer defined by the transfer descriptor input
**         parameter DescriptorPtr. This method is intended to perform
**         fast check of DMA channel transfer status and no validity or
**         consistency checks are performed. Possible values are
**         LDD_DMA_IDLE returned after enabling or disabling channel or
**         between separate transfers of nested transfer operation.
**         During the DMA transfer active operation LDD_DMA_BUSY is
**         returned. LDD_DMA_DONE is returned after cycle-steal, single
**         or nested transfer completes and before start of another
**         transfer or before channel enable or disable. If DMA error
**         was detected, LDD_DMA_ERR is returned.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - DMA channel status.
*/
/* ===================================================================*/
LDD_DMA_TChannelStatus DMA1_GetChannelStatus(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_GetChannelLastError (component DMA_LDD)
*/
/*!
**     @brief
**         Returns last recorded channel error. Returned error
**         structure is passed as pointer parameter. Structure contains
**         last recorded error status and channel number associated
**         with this error record. Error mask constants can be used to
**         identify stored error type.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         ErrorStatusPtr  - Pointer to DMA error
**                           status structure.
*/
/* ===================================================================*/
void DMA1_GetChannelLastError(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TError *ErrorStatusPtr);

/*
** ===================================================================
**     Method      :  DMA1_GetChannelTransferredBytes (component DMA_LDD)
*/
/*!
**     @brief
**         The method gets a number of transferred bytes by DMA
**         transfer defined by the transfer descriptor input parameter
**         DescriptorPtr. Value of transferred bytes is stored in
**         variable defined by its address and reflects either number
**         of bytes transferred in currently active transfer or number
**         of bytes transferred in last completed transfer.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         ByteCountPtr    - Pointer to number of
**                           transferred bytes.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMA1_GetChannelTransferredBytes(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TByteCount *ByteCountPtr);

/*
** ===================================================================
**     Method      :  DMA1_SetChannelSourceAddress (component DMA_LDD)
*/
/*!
**     @brief
**         The method sets an source address for data to be transferred
**         by the DMA channel allocated for the DMA transfer defined by
**         the transfer descriptor parameter DescriptorPtr. This method
**         can be used to update DMA transfer source address when DMA
**         channel is enabled. New source address is stored in transfer
**         descriptor and written to associated DMA channel registers.
**         The new source address can be optionally checked for
**         consistency with rest of the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         Address         - Address of source data for a DMA
**                           channel allocated for a DMA transfer
**                           descriptor defined by the TCD parameter.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected source address
**                           is inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMA1_SetChannelSourceAddress(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TAddress Address);

/*
** ===================================================================
**     Method      :  DMA1_SetChannelDestinationAddress (component DMA_LDD)
*/
/*!
**     @brief
**         The method sets an destination address for data to be
**         transferred by the DMA channel allocated for the DMA
**         transfer defined by the transfer descriptor parameter
**         DescriptorPtr. This method can be used to update DMA
**         transfer destination address when DMA channel is enabled.
**         New destination address is stored in transfer descriptor and
**         written to associated DMA channel registers. The new
**         destination address can be optionally checked for
**         consistency with rest of the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         Address         - Address of a destination data to
**                           be transferred to by the DMA channel
**                           allocated for a DMA transfer descriptor
**                           defined by the TCD parameter.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected source address
**                           is inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMA1_SetChannelDestinationAddress(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TAddress Address);

/*
** ===================================================================
**     Method      :  DMA1_SetChannelSourceTransferSize (component DMA_LDD)
*/
/*!
**     @brief
**         The method sets an source transfer size for data to be
**         transferred by the DMA channel allocated for the DMA
**         transfer defined by the transfer descriptor parameter
**         DescriptorPtr. This method can be used to update DMA
**         transfer source transfer size when DMA channel is enabled.
**         New source transfer size is stored in transfer descriptor
**         and written to associated DMA channel registers. The new
**         source transfer size can be optionally checked for
**         consistency with rest of the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         TransferSize    - Source transfer size.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected source transfer
**                           size is inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMA1_SetChannelSourceTransferSize(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TTransferSize TransferSize);

/*
** ===================================================================
**     Method      :  DMA1_SetChannelDestinationTransferSize (component DMA_LDD)
*/
/*!
**     @brief
**         The method sets an destination transfer size for data to be
**         transferred by the DMA channel allocated for the DMA
**         transfer defined by the transfer descriptor parameter
**         DescriptorPtr. This method can be used to update DMA
**         transfer destination transfer size when DMA channel is
**         enabled. New destination transfer size is stored in transfer
**         descriptor and written to associated DMA channel registers.
**         The new destination transfer size can be optionally checked
**         for consistency with rest of the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         TransferSize    - Destination transfer
**                           size.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected destination
**                           transfer size is inconsistent with rest of
**                           transfer descriptor data.
*/
/* ===================================================================*/
LDD_TError DMA1_SetChannelDestinationTransferSize(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TTransferSize TransferSize);

/*
** ===================================================================
**     Method      :  DMA1_SetChannelByteCount (component DMA_LDD)
*/
/*!
**     @brief
**         The method sets a byte count (size of data) to be
**         transferred by the DMA channel allocated for the DMA
**         transfer defined by the transfer descriptor input parameter
**         DescriptorPtr. This method can be used to update DMA
**         transfer byte count when DMA channel is enabled. New
**         transfer byte count is stored in transfer descriptor and
**         written to associated DMA channel registers. The new
**         transfer byte count can be optionally checked for
**         consistency with rest of the transfer descriptor data. If
**         nested operation is used, the method sets the minor (inner)
**         loop byte count.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         ByteCount       - Byte count (size of data) to
**                           be transferred by the DMA channel allocated
**                           for a DMA transfer descriptor defined by
**                           the TCD parameter.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected byte count is
**                           inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMA1_SetChannelByteCount(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TByteCount ByteCount);

/*
** ===================================================================
**     Method      :  DMA1_GetChannelDescriptorUpdate (component DMA_LDD)
*/
/*!
**     @brief
**         The method gets transfer descriptor parameters of the DMA
**         channel allocated for the component. Allocated channel is
**         identified by the transfer descriptor structure address and
**         it is updated with values from the allocated DMA channel
**         registers. The method can be called only if the channel is
**         disabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor or allocated channel is enabled.
*/
/* ===================================================================*/
LDD_TError DMA1_GetChannelDescriptorUpdate(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_SetChannelDescriptorUpdate (component DMA_LDD)
*/
/*!
**     @brief
**         The method updates DMA channel allocated by transfer
**         descriptor defined by DescriptorPtr. Allocated DMA channel
**         registers are reinitialized with new values from transfer
**         descriptor structure. New tansfer descriptor is tested for
**         data consistency. The method can be called only if the
**         channel is disabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor or allocated channel is enabled.
**                           - ERR_PARAM_DATA - Selected transfer
**                           descriptor is inconsistent.
*/
/* ===================================================================*/
LDD_TError DMA1_SetChannelDescriptorUpdate(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_SetClockConfiguration (component DMA_LDD)
**
**     Description :
**         This method changes the clock configuration. During a clock 
**         configuration change the component changes it's setting 
**         immediately upon a request.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void DMA1_SetClockConfiguration(LDD_TDeviceData *DeviceDataPtr, LDD_TClockConfiguration ClockConfiguration);


/* END DMA1. */

#endif
/* ifndef __DMA1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
