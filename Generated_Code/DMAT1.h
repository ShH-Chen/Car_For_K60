/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : DMAT1.h
**     Project     : ProcessorExpert
**     Processor   : MK60FX512VLQ15
**     Component   : DMATransfer_LDD
**     Version     : Component 01.100, Driver 01.08, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2014-07-15, 17:57, # CodeGen: 103
**     Abstract    :
**          This embedded component implements
**          a DMA transfer channel descriptor definition.
**     Settings    :
**          Component name                                 : DMAT1
**          DMA controller device                          : DMA1
**          Channel                                        : 
**            Channel select                               : Fixed
**              Channel                                    : DMA_Channel0
**              Interrupts                                 : Disabled
**              Allocate channel                           : yes
**          Trigger                                        : 
**            Trigger source type                          : Peripheral device
**              Trigger source                             : DMA_GPIO_Port_C
**              Periodic trigger                           : Disabled
**          Data source                                    : 
**            External object declaration                  : 
**            Address                                      : &GPIOD_PDIR
**            Transfer size                                : 8-bit
**            Address offset                               : 0
**            Circular buffer                              : 16 Bytes
**          Data destination                               : 
**            External object declaration                  : extern byte **Dest_data;
**            Address                                      : Dest_data
**            Transfer size                                : 8-bit
**            Address offset                               : 0
**            Circular buffer                              : 16 Bytes
**          Data size                                      : 
**            External object declaration                  : 
**            Value                                        : 1
**          Transfer control                               : Single transfer
**            Disable after transfer                       : no
**            Bandwidth control                            : No stalls
**            Channel linking                              : Disabled
**            After transfer complete                      : Adress adjustment
**              Source address adjustment                  : 0
**              Destination address adjustment             : 1
**          Initialization                                 : 
**            Auto initialization                          : no
**            Half complete                                : Disabled
**            Event mask                                   : 
**              OnComplete                                 : Disabled
**              OnError                                    : Disabled
**     Contents    :
**         Init                       - LDD_TDeviceData* DMAT1_Init(LDD_TUserData *UserDataPtr);
**         Deinit                     - void DMAT1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         AllocateChannel            - LDD_TError DMAT1_AllocateChannel(LDD_TDeviceData *DeviceDataPtr);
**         FreeChannel                - LDD_TError DMAT1_FreeChannel(LDD_TDeviceData *DeviceDataPtr);
**         EnableChannel              - LDD_TError DMAT1_EnableChannel(LDD_TDeviceData *DeviceDataPtr);
**         DisableChannel             - LDD_TError DMAT1_DisableChannel(LDD_TDeviceData *DeviceDataPtr);
**         StartTransfer              - LDD_TError DMAT1_StartTransfer(LDD_TDeviceData *DeviceDataPtr);
**         CancelTransfer             - LDD_TError DMAT1_CancelTransfer(LDD_TDeviceData *DeviceDataPtr);
**         GetTransferredBytes        - LDD_TError DMAT1_GetTransferredBytes(LDD_TDeviceData *DeviceDataPtr,...
**         GetChannelStatus           - LDD_DMA_TChannelStatus DMAT1_GetChannelStatus(LDD_TDeviceData *DeviceDataPtr);
**         GetLastError               - void DMAT1_GetLastError(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TError...
**         SetSourceAddress           - LDD_TError DMAT1_SetSourceAddress(LDD_TDeviceData *DeviceDataPtr,...
**         SetDestinationAddress      - LDD_TError DMAT1_SetDestinationAddress(LDD_TDeviceData *DeviceDataPtr,...
**         SetSourceTransferSize      - LDD_TError DMAT1_SetSourceTransferSize(LDD_TDeviceData *DeviceDataPtr,...
**         SetDestinationTransferSize - LDD_TError DMAT1_SetDestinationTransferSize(LDD_TDeviceData *DeviceDataPtr,...
**         SetByteCount               - LDD_TError DMAT1_SetByteCount(LDD_TDeviceData *DeviceDataPtr,...
**         SetDescriptorUpdate        - LDD_TError DMAT1_SetDescriptorUpdate(LDD_TDeviceData *DeviceDataPtr,...
**         GetDescriptorUpdate        - LDD_TError DMAT1_GetDescriptorUpdate(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file DMAT1.h
** @version 01.08
** @brief
**          This embedded component implements
**          a DMA transfer channel descriptor definition.
*/         
/*!
**  @addtogroup DMAT1_module DMAT1 module documentation
**  @{
*/         

#ifndef __DMAT1_H
#define __DMAT1_H

/* MODULE DMAT1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "DMA1.h"
#include "DMA_PDD.h"
#include "DMAMUX_PDD.h"

#include "Cpu.h"

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define DMAT1_PRPH_BASE_ADDRESS  0x40008000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define DMAT1_Init_METHOD_ENABLED      /*!< Init method of the component DMAT1 is enabled (generated) */
#define DMAT1_Deinit_METHOD_ENABLED    /*!< Deinit method of the component DMAT1 is enabled (generated) */
#define DMAT1_AllocateChannel_METHOD_ENABLED /*!< AllocateChannel method of the component DMAT1 is enabled (generated) */
#define DMAT1_FreeChannel_METHOD_ENABLED /*!< FreeChannel method of the component DMAT1 is enabled (generated) */
#define DMAT1_EnableChannel_METHOD_ENABLED /*!< EnableChannel method of the component DMAT1 is enabled (generated) */
#define DMAT1_DisableChannel_METHOD_ENABLED /*!< DisableChannel method of the component DMAT1 is enabled (generated) */
#define DMAT1_StartTransfer_METHOD_ENABLED /*!< StartTransfer method of the component DMAT1 is enabled (generated) */
#define DMAT1_CancelTransfer_METHOD_ENABLED /*!< CancelTransfer method of the component DMAT1 is enabled (generated) */
#define DMAT1_GetTransferredBytes_METHOD_ENABLED /*!< GetTransferredBytes method of the component DMAT1 is enabled (generated) */
#define DMAT1_GetChannelStatus_METHOD_ENABLED /*!< GetChannelStatus method of the component DMAT1 is enabled (generated) */
#define DMAT1_GetLastError_METHOD_ENABLED /*!< GetLastError method of the component DMAT1 is enabled (generated) */
#define DMAT1_SetSourceAddress_METHOD_ENABLED /*!< SetSourceAddress method of the component DMAT1 is enabled (generated) */
#define DMAT1_SetDestinationAddress_METHOD_ENABLED /*!< SetDestinationAddress method of the component DMAT1 is enabled (generated) */
#define DMAT1_SetSourceTransferSize_METHOD_ENABLED /*!< SetSourceTransferSize method of the component DMAT1 is enabled (generated) */
#define DMAT1_SetDestinationTransferSize_METHOD_ENABLED /*!< SetDestinationTransferSize method of the component DMAT1 is enabled (generated) */
#define DMAT1_SetByteCount_METHOD_ENABLED /*!< SetByteCount method of the component DMAT1 is enabled (generated) */
#define DMAT1_SetDescriptorUpdate_METHOD_ENABLED /*!< SetDescriptorUpdate method of the component DMAT1 is enabled (generated) */
#define DMAT1_GetDescriptorUpdate_METHOD_ENABLED /*!< GetDescriptorUpdate method of the component DMAT1 is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */

/* Source circular buffer base address mask. Represents required 0-modulo-size mask of base source address when using circular buffer. */
#define DMAT1_SOURCE_CIRCULAR_BUFFER_ADDRESS_MASK 15U
/* Destination circular buffer base address mask. Represents required 0-modulo-size mask of base destination address when using circular buffer. */
#define DMAT1_DESTINATION_CIRCULAR_BUFFER_ADDRESS_MASK 15U

/*
** ===================================================================
**     Method      :  DMAT1_Init (component DMATransfer_LDD)
*/
/*!
**     @brief
**         Initializes the DMATransfer component. Allocates memory for
**         the device data structure.
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* DMAT1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  DMAT1_Deinit (component DMATransfer_LDD)
*/
/*!
**     @brief
**         Deinitializes the DMATransfer component.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
*/
/* ===================================================================*/
void DMAT1_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMAT1_AllocateChannel (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method allocates DMA channel for the DMA transfer. This
**         method must be called before DMA channel is initialized.
**         Otherwise ERR_NOTAVAIL error code is returned after call of
**         DMA_LDD channel methods.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any possible
**                           channel with desired features to be
**                           allocated.
*/
/* ===================================================================*/
LDD_TError DMAT1_AllocateChannel(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMAT1_FreeChannel (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method frees and disables the DMA channel allocated for
**         the DMA transfer
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMAT1_FreeChannel(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMAT1_EnableChannel (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method initializes and/or enables the DMA channel
**         allocated for the DMA transfer defined by the transfer
**         descriptor input parameter DescriptorPtr. First call of this
**         method on given DMA channel initializes it and enables HW
**         requests if Peripheral device or Always enabled trigger
**         source is selected in transfer descriptor Trigger source
**         type item. This method can be also used together with
**         Disable method to temporary switch On/Off the DMA channel HW
**         requests. In such case DMA channel registers are not
**         reinitialized again. New initialization of DMA channel can
**         be done via SetChannelDescriptorUpdate method which
**         reinitializes whole channel with new transfer descriptor.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Transfer descriptor data
**                           are inconsistent.
*/
/* ===================================================================*/
LDD_TError DMAT1_EnableChannel(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMAT1_DisableChannel (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method disables the DMA channel allocated for the DMA
**         transfer. However, it is still possible to start transfer
**         explicitly as SW transfer requests via StartChannelTransfer
**         method.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMAT1_DisableChannel(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMAT1_StartTransfer (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method starts DMA transfer on the DMA channel allocated
**         for this transfer. This methods initiates explicit SW
**         transfer request.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMAT1_StartTransfer(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMAT1_CancelTransfer (component DMATransfer_LDD)
*/
/*!
**     @brief
**         This method cancels DMA transfer. The cancel takes effect
**         after the last write of the current read/write sequence and
**         the channel retires as if the request was serviced normally.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMAT1_CancelTransfer(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMAT1_GetTransferredBytes (component DMATransfer_LDD)
*/
/*!
**     @brief
**         Returns current number of transferred bytes. Value is stored
**         in variable defined by its address and reflects either
**         number of bytes transferred in currently active transfer or
**         number of bytes transferred in last completed transfer.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         ByteCountPtr    - Pointer to number of
**                           transferred bytes.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMAT1_GetTransferredBytes(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TByteCount *ByteCountPtr);

/*
** ===================================================================
**     Method      :  DMAT1_GetChannelStatus (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method gets a status of the DMA channel allocated for
**         the DMA transfer. This method is intended to perform fast
**         check of DMA channel transfer status and no validity or
**         consistency checks are performed. Possible values are
**         described in LDD_DMA_TChannelStatus type description.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - DMA channel status.
*/
/* ===================================================================*/
LDD_DMA_TChannelStatus DMAT1_GetChannelStatus(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMAT1_GetLastError (component DMATransfer_LDD)
*/
/*!
**     @brief
**         Returns last recorded channel error. Returned error
**         structure is passed as pointer parameter. Structure contains
**         last recorded error status and channel number associated
**         with this error record.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         ErrorStatusPtr  - Pointer to an error
**                           status structure where the error
**                           information will be returned in.
*/
/* ===================================================================*/
void DMAT1_GetLastError(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TError *ErrorStatusPtr);

/*
** ===================================================================
**     Method      :  DMAT1_SetSourceAddress (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method sets an data source address for to be transferred
**         by the DMA channel allocated for the DMA transfer. This
**         method can be used to update DMA transfer source address
**         when DMA channel is enabled. New source address is stored in
**         transfer descriptor and written to associated DMA channel
**         registers. The new source address can be optionally checked
**         for consistency with rest of the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Address         - Address of source data for the DMA
**                           channel allocated for this TCD.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected source address
**                           is inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMAT1_SetSourceAddress(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TAddress Address);

/*
** ===================================================================
**     Method      :  DMAT1_SetDestinationAddress (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method sets an data destination address for to be
**         transferred by the DMA channel allocated for the DMA
**         transfer.  This method can be used to update DMA transfer
**         destination address when DMA channel is enabled. New
**         destination address is stored in transfer descriptor and
**         written to associated DMA channel registers. The new source
**         address can be optionally checked for consistency with rest
**         of the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Address         - Address of a destination data to
**                           be transferred to by the DMA channel
**                           allocated for this TCD.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected source address
**                           is inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMAT1_SetDestinationAddress(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TAddress Address);

/*
** ===================================================================
**     Method      :  DMAT1_SetSourceTransferSize (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method sets an source transfer size for data to be
**         transferred by the DMA channel allocated for the DMA
**         transfer. This method can be used to update DMA transfer
**         source transfer size when DMA channel is enabled. New source
**         transfer size is stored in transfer descriptor and written
**         to associated DMA channel registers. The new source transfer
**         size can be optionally checked for consistency with rest of
**         the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         TransferSize    - Source transfer size.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected source transfer
**                           size is inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMAT1_SetSourceTransferSize(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferSize TransferSize);

/*
** ===================================================================
**     Method      :  DMAT1_SetDestinationTransferSize (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method sets an destination transfer size for data to be
**         transferred by the DMA channel allocated for the DMA
**         transfer. This method can be used to update DMA transfer
**         destination transfer size when DMA channel is enabled. New
**         destination transfer size is stored in transfer descriptor
**         and written to associated DMA channel registers. The new
**         destination transfer size can be optionally checked for
**         consistency with rest of the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         TransferSize    - Destination transfer
**                           size.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected destination
**                           transfer size is inconsistent with rest of
**                           transfer descriptor data.
*/
/* ===================================================================*/
LDD_TError DMAT1_SetDestinationTransferSize(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferSize TransferSize);

/*
** ===================================================================
**     Method      :  DMAT1_SetByteCount (component DMATransfer_LDD)
*/
/*!
**     @brief
**         The method sets a byte count (size of data) to be
**         transferred for the DMA transfer. This method can be used to
**         update DMA transfer byte count when DMA channel is enabled.
**         New transfer byte count is stored in transfer descriptor and
**         written to associated DMA channel registers. The new
**         transfer byte count can be optionally checked for
**         consistency with rest of the transfer descriptor data. If
**         nested operation is used, the method sets the minor (inner)
**         loop byte count.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         ByteCount       - Byte count (size of data) to
**                           be transferred by the DMA channel allocated
**                           for this TCD.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected byte count is
**                           inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMAT1_SetByteCount(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TByteCount ByteCount);

/*
** ===================================================================
**     Method      :  DMAT1_SetDescriptorUpdate (component DMATransfer_LDD)
*/
/*!
**     @brief
**         Updates the DMA channel allocated for the component with new
**         Transfer descriptor. Address of Transfer descriptor used for
**         updated is passed as input parameter. This method can be
**         used to reinitialization of whole DMA channel. New Transfer
**         descriptor is tested for data consistency. The method could
**         be called only if the channel is disabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to transfer
**                           descriptor.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor or allocated channel is enabled.
**                           - ERR_PARAM_DATA - Transfer descriptor data
**                           are inconsistent.
*/
/* ===================================================================*/
LDD_TError DMAT1_SetDescriptorUpdate(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMAT1_GetDescriptorUpdate (component DMATransfer_LDD)
*/
/*!
**     @brief
**         Get updated Transfer descriptor of the DMA channel allocated
**         for the component. The method updates components Transfer
**         descriptor structure and stores its address in the indirect
**         input parameter. The method can be called only if the DMA
**         channel is disabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorAddressPtr - Pointer
**                           to the address of DMA transfer descriptor
**                           structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor or allocated channel is enabled.
*/
/* ===================================================================*/
LDD_TError DMAT1_GetDescriptorUpdate(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptorPtr *DescriptorAddressPtr);

/* END DMAT1. */

#endif
/* ifndef __DMAT1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
